swagger: "2.0"
info:
  description: "Best API to create, delete and modify customers, create and modify projects and to create and modify contracts"
  version: "1.0.0"
  title: "Swagger customercontracts"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "customercontracts.swagger.io"
basePath: "/v2"
tags:
- name: "XU Code Factory Backend"
  description: "Everything about your code"
- name: "customer"
  description: "Access to customercontracts orders"
- name: "project"
  description: "Operations about project"
schemes:
- "https"
- "http"
paths:
  /customer:
    post:
      tags:
      - "customer"
      summary: "Add a new customer to the contracts"
      description: ""
      operationId: "addcustomer"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "customer object that needs to be added to the contracts"
        required: true
        schema:
          $ref: "#/definitions/customer"
      responses:
        "405":
          description: "Invalid input"
      security:
      - customercontracts_auth:
        - "write:customers"
        - "read:customers"
    put:
      tags:
      - "customer"
      summary: "Update an existing customer"
      description: ""
      operationId: "updatecustomer"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "customer object that needs to be added to the contracts"
        required: true
        schema:
          $ref: "#/definitions/customer"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "customer not found"
        "405":
          description: "Validation exception"
      security:
      - customercontracts_auth:
        - "write:customers"
        - "read:customers"
  /customer/{customerId}:
    delete:
      tags:
      - "customer"
      summary: "Deletes a customer"
      description: ""
      operationId: "deletecustomer"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "customerId"
        in: "path"
        description: "customer id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "customer not found"
      security:
      - customercontracts_auth:
        - "write:customers"
        - "read:customers"
        
        
  /contracts:
    post:
      tags:
      - "contracts"
      summary: "Add a contract"
      description: ""
      operationId: "placeOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for purchasing the customer"
        required: true
        schema:
          $ref: "#/definitions/contract"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/contract"
        "400":
          description: "Invalid Order"
          
  /contracts/order/{orderId}:
    delete:
      tags:
      - "contracts"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
          
          
  /project:
    post:
      tags:
      - "project"
      summary: "Create project"
      description: "This can only be done by the logged in project."
      operationId: "createproject"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created project object"
        required: true
        schema:
          $ref: "#/definitions/project"
      responses:
        default:
          description: "successful operation"
 
  /project/{projectname}:
    put:
      tags:
      - "project"
      summary: "Updated project"
      description: "This can only be done by the logged in project."
      operationId: "updateproject"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "projectname"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated project object"
        required: true
        schema:
          $ref: "#/definitions/project"
      responses:
        "400":
          description: "Invalid project supplied"
        "404":
          description: "project not found"
    delete:
      tags:
      - "project"
      summary: "Delete project"
      description: "This can only be done by the logged in project."
      operationId: "deleteproject"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "projectname"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid projectname supplied"
        "404":
          description: "project not found"
securityDefinitions:
  customercontracts_auth:
    type: "oauth2"
    authorizationUrl: "http://customercontracts.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:customers: "modify customers in your account"
      read:customers: "read your customers"
definitions:



  project:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      projectname:
        type: "string"
      projectStatus:
        type: "integer"
        format: "int32"
        description: "project Status"
    xml:
      name: "project"
  
  customer:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "doggie"

  contract:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "microsoft"


externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"